openapi: 3.0.1
info:
  description: Endpoints for managing books and users
  title: Online Book Store API
  version: 1.0.0
servers:
- url: http://localhost:8080/api
tags:
- description: Endpoints for managing books
  name: Book management
- description: Endpoints for managing users
  name: User management
paths:
  /books:
    get:
      description: API for getting list of all available books
      parameters:
      - description: Page number (0-based)
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Page size
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      - description: "Sorting criteria (e.g. title,author)"
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BookDto'
                type: array
          description: List of books
      summary: Get all books
      tags:
      - Book management
      x-accepts:
      - application/json
    post:
      description: API for creating a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequestDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
          description: Book successfully created
      summary: Create a new book
      tags:
      - Book management
      x-content-type: application/json
      x-accepts:
      - application/json
  /books/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Book deleted (no content)
      summary: Delete a book by id
      tags:
      - Book management
      x-accepts:
      - application/json
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
          description: Book found
        "404":
          description: Book not found
      summary: Get a book by id
      tags:
      - Book management
      x-accepts:
      - application/json
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequestDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
          description: Updated book
      summary: Update a book by id
      tags:
      - Book management
      x-content-type: application/json
      x-accepts:
      - application/json
  /books/search:
    get:
      description: API for searching books
      parameters:
      - explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: author
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BookDto'
                type: array
          description: List of matching books
      summary: Searching books with parameters
      tags:
      - Book management
      x-accepts:
      - application/json
  /auth/registration:
    post:
      description: API endpoint for registering a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequestDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
          description: User successfully registered
        "400":
          description: Invalid input data
        "409":
          description: User with given email already exists
      summary: Register a new user
      tags:
      - User management
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    CreateBookRequestDto:
      example:
        author: author
        price: 0.8008281904610115
        isbn: isbn
        coverImage: coverImage
        description: description
        title: title
      properties:
        title:
          maxLength: 255
          type: string
        author:
          maxLength: 255
          type: string
        isbn:
          type: string
        price:
          format: decimal
          type: number
        description:
          type: string
        coverImage:
          type: string
      required:
      - author
      - isbn
      - price
      - title
      type: object
    BookDto:
      example:
        author: author
        price: 6.027456183070403
        isbn: isbn
        coverImage: coverImage
        description: description
        id: 0
        title: title
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        price:
          format: decimal
          type: number
        description:
          type: string
        coverImage:
          type: string
      required:
      - author
      - id
      - isbn
      - price
      - title
      type: object
    UserRegistrationRequestDto:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        shippingAddress: shippingAddress
        email: email
      properties:
        email:
          format: email
          type: string
        password:
          format: password
          type: string
        firstName:
          type: string
        lastName:
          type: string
        shippingAddress:
          type: string
      required:
      - email
      - firstName
      - lastName
      - password
      type: object
    UserResponseDto:
      example:
        firstName: firstName
        lastName: lastName
        shippingAddress: shippingAddress
        id: 0
        email: email
      properties:
        id:
          type: integer
        email:
          format: email
          type: string
        firstName:
          type: string
        lastName:
          type: string
        shippingAddress:
          type: string
      required:
      - email
      - firstName
      - id
      - lastName
      type: object

