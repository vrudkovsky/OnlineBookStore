/*
 * Online Book Store API
 * Endpoints for managing books and users
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BookDto;
import org.openapitools.client.model.CreateBookRequestDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for booksGet
     * @param page Page number (0-based) (optional)
     * @param size Page size (optional)
     * @param sort Sorting criteria (e.g. title,author) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of books </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksGetCall(Integer page, Integer size, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksGetValidateBeforeCall(Integer page, Integer size, String sort, final ApiCallback _callback) throws ApiException {
        return booksGetCall(page, size, sort, _callback);

    }

    /**
     * Get all books
     * API for getting list of all available books
     * @param page Page number (0-based) (optional)
     * @param size Page size (optional)
     * @param sort Sorting criteria (e.g. title,author) (optional)
     * @return List&lt;BookDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of books </td><td>  -  </td></tr>
     </table>
     */
    public List<BookDto> booksGet(Integer page, Integer size, String sort) throws ApiException {
        ApiResponse<List<BookDto>> localVarResp = booksGetWithHttpInfo(page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Get all books
     * API for getting list of all available books
     * @param page Page number (0-based) (optional)
     * @param size Page size (optional)
     * @param sort Sorting criteria (e.g. title,author) (optional)
     * @return ApiResponse&lt;List&lt;BookDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of books </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BookDto>> booksGetWithHttpInfo(Integer page, Integer size, String sort) throws ApiException {
        okhttp3.Call localVarCall = booksGetValidateBeforeCall(page, size, sort, null);
        Type localVarReturnType = new TypeToken<List<BookDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all books (asynchronously)
     * API for getting list of all available books
     * @param page Page number (0-based) (optional)
     * @param size Page size (optional)
     * @param sort Sorting criteria (e.g. title,author) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of books </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksGetAsync(Integer page, Integer size, String sort, final ApiCallback<List<BookDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksGetValidateBeforeCall(page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<List<BookDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted (no content) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling booksIdDelete(Async)");
        }

        return booksIdDeleteCall(id, _callback);

    }

    /**
     * Delete a book by id
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted (no content) </td><td>  -  </td></tr>
     </table>
     */
    public void booksIdDelete(Integer id) throws ApiException {
        booksIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete a book by id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted (no content) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = booksIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a book by id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted (no content) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling booksIdGet(Async)");
        }

        return booksIdGetCall(id, _callback);

    }

    /**
     * Get a book by id
     * 
     * @param id  (required)
     * @return BookDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public BookDto booksIdGet(Integer id) throws ApiException {
        ApiResponse<BookDto> localVarResp = booksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a book by id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;BookDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookDto> booksIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = booksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a book by id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdGetAsync(Integer id, final ApiCallback<BookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksIdPut
     * @param id  (required)
     * @param createBookRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated book </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdPutCall(Integer id, CreateBookRequestDto createBookRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBookRequestDto;

        // create path and map variables
        String localVarPath = "/books/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksIdPutValidateBeforeCall(Integer id, CreateBookRequestDto createBookRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling booksIdPut(Async)");
        }

        // verify the required parameter 'createBookRequestDto' is set
        if (createBookRequestDto == null) {
            throw new ApiException("Missing the required parameter 'createBookRequestDto' when calling booksIdPut(Async)");
        }

        return booksIdPutCall(id, createBookRequestDto, _callback);

    }

    /**
     * Update a book by id
     * 
     * @param id  (required)
     * @param createBookRequestDto  (required)
     * @return BookDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated book </td><td>  -  </td></tr>
     </table>
     */
    public BookDto booksIdPut(Integer id, CreateBookRequestDto createBookRequestDto) throws ApiException {
        ApiResponse<BookDto> localVarResp = booksIdPutWithHttpInfo(id, createBookRequestDto);
        return localVarResp.getData();
    }

    /**
     * Update a book by id
     * 
     * @param id  (required)
     * @param createBookRequestDto  (required)
     * @return ApiResponse&lt;BookDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated book </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookDto> booksIdPutWithHttpInfo(Integer id, CreateBookRequestDto createBookRequestDto) throws ApiException {
        okhttp3.Call localVarCall = booksIdPutValidateBeforeCall(id, createBookRequestDto, null);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a book by id (asynchronously)
     * 
     * @param id  (required)
     * @param createBookRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated book </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksIdPutAsync(Integer id, CreateBookRequestDto createBookRequestDto, final ApiCallback<BookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksIdPutValidateBeforeCall(id, createBookRequestDto, _callback);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksPost
     * @param createBookRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksPostCall(CreateBookRequestDto createBookRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBookRequestDto;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksPostValidateBeforeCall(CreateBookRequestDto createBookRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBookRequestDto' is set
        if (createBookRequestDto == null) {
            throw new ApiException("Missing the required parameter 'createBookRequestDto' when calling booksPost(Async)");
        }

        return booksPostCall(createBookRequestDto, _callback);

    }

    /**
     * Create a new book
     * API for creating a new book
     * @param createBookRequestDto  (required)
     * @return BookDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book successfully created </td><td>  -  </td></tr>
     </table>
     */
    public BookDto booksPost(CreateBookRequestDto createBookRequestDto) throws ApiException {
        ApiResponse<BookDto> localVarResp = booksPostWithHttpInfo(createBookRequestDto);
        return localVarResp.getData();
    }

    /**
     * Create a new book
     * API for creating a new book
     * @param createBookRequestDto  (required)
     * @return ApiResponse&lt;BookDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookDto> booksPostWithHttpInfo(CreateBookRequestDto createBookRequestDto) throws ApiException {
        okhttp3.Call localVarCall = booksPostValidateBeforeCall(createBookRequestDto, null);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new book (asynchronously)
     * API for creating a new book
     * @param createBookRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksPostAsync(CreateBookRequestDto createBookRequestDto, final ApiCallback<BookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksPostValidateBeforeCall(createBookRequestDto, _callback);
        Type localVarReturnType = new TypeToken<BookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksSearchGet
     * @param title  (optional)
     * @param author  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching books </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksSearchGetCall(String title, String author, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksSearchGetValidateBeforeCall(String title, String author, final ApiCallback _callback) throws ApiException {
        return booksSearchGetCall(title, author, _callback);

    }

    /**
     * Searching books with parameters
     * API for searching books
     * @param title  (optional)
     * @param author  (optional)
     * @return List&lt;BookDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching books </td><td>  -  </td></tr>
     </table>
     */
    public List<BookDto> booksSearchGet(String title, String author) throws ApiException {
        ApiResponse<List<BookDto>> localVarResp = booksSearchGetWithHttpInfo(title, author);
        return localVarResp.getData();
    }

    /**
     * Searching books with parameters
     * API for searching books
     * @param title  (optional)
     * @param author  (optional)
     * @return ApiResponse&lt;List&lt;BookDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching books </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BookDto>> booksSearchGetWithHttpInfo(String title, String author) throws ApiException {
        okhttp3.Call localVarCall = booksSearchGetValidateBeforeCall(title, author, null);
        Type localVarReturnType = new TypeToken<List<BookDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searching books with parameters (asynchronously)
     * API for searching books
     * @param title  (optional)
     * @param author  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching books </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksSearchGetAsync(String title, String author, final ApiCallback<List<BookDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksSearchGetValidateBeforeCall(title, author, _callback);
        Type localVarReturnType = new TypeToken<List<BookDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
