openapi: 3.0.1
info:
  title: Online Book Store API
  version: 1.0.0
  description: Endpoints for managing books and users

servers:
  - url: http://localhost:8080/api

tags:
  - name: Book management
    description: Endpoints for managing books
  - name: User management
    description: Endpoints for managing users

paths:
  /books:
    post:
      tags: [Book management]
      summary: Create a new book
      description: API for creating a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequestDto'
      responses:
        '200':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'

    get:
      tags: [Book management]
      summary: Get all books
      description: API for getting list of all available books
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: Page number (0-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
          description: Page size
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Sorting criteria (e.g. title,author)
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDto'

  /books/{id}:
    get:
      tags: [Book management]
      summary: Get a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '404':
          description: Book not found

    put:
      tags: [Book management]
      summary: Update a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequestDto'
      responses:
        '200':
          description: Updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'

    delete:
      tags: [Book management]
      summary: Delete a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted (no content)

  /books/search:
    get:
      tags: [Book management]
      summary: Searching books with parameters
      description: API for searching books
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: author
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of matching books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDto'

  /auth/registration:
    post:
      tags: [User management]
      summary: Register a new user
      description: API endpoint for registering a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequestDto'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input data
        '409':
          description: User with given email already exists

components:
  schemas:
    CreateBookRequestDto:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        author:
          type: string
          maxLength: 255
        isbn:
          type: string
        price:
          type: number
          format: decimal
        description:
          type: string
        coverImage:
          type: string
      required: [title, author, isbn, price]

    BookDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        price:
          type: number
          format: decimal
        description:
          type: string
        coverImage:
          type: string
      required: [id, title, author, isbn, price]

    UserRegistrationRequestDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        shippingAddress:
          type: string
      required: [email, password, firstName, lastName]

    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        shippingAddress:
          type: string
      required: [id, email, firstName, lastName]
